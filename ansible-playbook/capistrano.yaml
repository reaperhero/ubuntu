# ci sync
- hosts: ci
  remote_user: root
  tasks:
  - name: synchronize from ci to local
    synchronize:
      src: /home/ops/deploy/
      dest: /tmp/{{app_name}}
      mode: pull
      delete: yes
# production
- hosts: "{{ variable_host | default('{{app_name}}') }}"
  debugger: on_failed
  gather_facts: no
  remote_user: root
  tasks:
  # 版本信息
  - name: register hashid
    shell: date +%Y%m%d%H%M%S
    register: hashid
  # 初始化app
  - name: Creates directory
    file:
      path: "{{ item }}"
      state: directory
      mode: 0775
    loop:
      - /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}
      - /srv/deploys/{{app_name}}/shared
      - /srv/apps/
  # 查询出当前有几个release
  - name: count release
    shell: 
      cmd: ls|sort -rn|wc -l
      chdir: /srv/deploys/{{app_name}}/releases/
    register: folder_sum
  # 查询出当前最新的release
  - name: the old folder
    shell: 
      cmd: ls |sort -n|tail -2|head -1
      chdir: /srv/deploys/{{app_name}}/releases/
    register: old_folder
    when: folder_sum.stdout|int > 1
  # 从老的版本拷贝过来一份
  - name: cp old to new
    shell:
      cmd: cp -r {{old_folder.stdout}} {{hashid.stdout}}
      chdir: /srv/deploys/{{app_name}}/releases/
    when: folder_sum.stdout|int > 1
  # 更新revisions日志
  - name: reflush revisions
    shell: 
      cmd: echo {{hashid.stdout}} >> revisions.log
      chdir: /srv/deploys/{{app_name}}
  # 同步本地仓库到生产机器
  - name: synchronize from local to remote
    synchronize:
      src: /tmp/{{app_name}}/
      dest: /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}
      mode: push
      delete: yes
      rsync_opts:
        - "--exclude=config.json"
  # 列举出多余的文件夹
  - name: more than max_release
    shell: 
      cmd: ls|sort -rn|tail -n +6
      chdir: /srv/deploys/{{app_name}}/releases/
    register: files_to_delete
    when: folder_sum.stdout|int > 5
  # 删除多余release
  - name: "remove release folder"
    file:
      path: "/srv/deploys/{{app_name}}/releases/{{ item }}"
      state: absent
    with_items: "{{ files_to_delete.stdout_lines }}"
    when: folder_sum.stdout|int > 5
  # 读取config.json内容
  - name: setup config ansible 
    include_vars:
      dir: /tmp/{{app_name}}/
      files_matching: config.json
      name: contents
  # 修改shared链接位置
  - name: shared link one
    file: 
      src: /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}
      dest: /srv/deploys/{{app_name}}/current 
      state: link
  # 修改apps软链接
  - name: apps link
    file: 
      src: /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}
      dest: /srv/apps/{{app_name}}
      state: link
  # 创建config.json的文件夹和链接
  - name: mkdir dir
    shell: 
      cmd: if [ ! -d {{item}} ];then mkdir {{item}} -p;fi && if [ ! -L ../releases/{{hashid.stdout}}/{{item}} ];then ln -s /srv/deploys/{{app_name}}/shared/{{item}} /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}/{{item}};fi
      chdir: /srv/deploys/{{app_name}}/shared
    with_items:
      - "{{contents['dir']}}"
    when: contents['dir']|length > 0
  # 创建config.json的文件和链接
  - name: touch file
    shell: 
      cmd: if [ ! -f {{item}} ];then touch {{item}};fi && if [ ! -L ../releases/{{hashid.stdout}}/{{item}} ];then ln -s /srv/deploys/{{app_name}}/shared/{{item}} /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}/{{item}};fi
      chdir: /srv/deploys/{{app_name}}/shared
    with_items:
      - "{{contents['file']}}"
    when: contents['file']|length > 0 
  # 判断docker-compose.yaml是否存在
  - name: check docker-compose.yaml is exists
    stat:
      path: /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}/docker-compose.yaml
    register: result
  # 判断是否需要部署
  - name: deploy docker
    shell: 
      cmd: docker-compose -f /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}/docker-compose.yaml up -d 
      chdir: /srv/deploys/{{app_name}}/releases/{{hashid.stdout}}
    when: result.stat.exists == true